<!doctype html>
<html lang="en">

<head>
    <title>QR Code Generator</title>

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
        integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

    <!-- Custom CSS -->
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@500&display=swap');

        * {
            font-family: Montserrat;
        }

        body {
            margin: 10px;
            padding: 10px;
        }
    </style>
</head>

<body>
    <div class="container">
        <h1 class="text-center">QR CODE GENERATOR</h1>
        <hr>
        <h4>Input</h4>
        <hr>
        <p>Please type the URL or Text below and click Generate!</p>
        <form class="form" action="/scan" method="POST">
            <input name="url" class="form-control" placeholder="URL or Text" type="text" required>
            <br>
            <button type="submit" class="btn btn-primary" value="Get QR">Generate</button>
        </form>
        <hr>
        <h2>or scan qr code</h2>
        <div style="width: 500px" id="reader"></div>
        <hr>
        <div id="scan-result"></div>
    </div>
    <script src="https://unpkg.com/html5-qrcode" type="text/javascript"></script>
    <script>
        const createResult = (data, container) => {
            const UL = document.createElement('ul');
            UL.classList = "list-group";
            for (const prog in data) {
                const LI = document.createElement('li');
                LI.classList = 'list-group-item';
                if (data[prog].detected) {
                    LI.innerHTML = `<span style="color: blue">${prog}:</span> <span style="color: red">detected: ${data[prog].detected}</span>, <span style="color: red">result: ${data[prog].result}</span>`;
                } else {
                    LI.innerHTML = `<span style="color: blue">${prog}:</span> <span style="color: green">detected: ${data[prog].detected}</span>, <span style="color: green">result: ${data[prog].result}</span>`;
                }
                UL.appendChild(LI);
            }
            container.appendChild(UL)
        }
        function onScanSuccess(decodedText, decodedResult) {
            // handle the scanned code as you like, for example:
            const scanResult = document.getElementById('scan-result');
            alert(`Code = ${decodedText}`, decodedResult);
            fetch(`/scan-url/${decodedText}`)
                .then(res => {
                    return res.json();
                })
                .then(data => {
                    console.log(data)
                    createResult(data, scanResult)
                    // scanResult.innerText = JSON.stringify(data);
                })
                .catch(err => {
                    console.log(err)
                })
            // console.log(`Code matched = ${decodedText}`, decodedResult);
        }
        function onScanFailure(error) {
            // handle scan failure, usually better to ignore and keep scanning.
            // for example:
            let url = decodedText;
            if (decodedText.includes('http://')) {
                url = decodedText.split('http://')[1]
            } else if (decodedText.includes('https://')) {
                url = decodedText.split('https://')[1]
            }
            fetch(`/scan-url/${url}`)
                .then(res => {
                    if (res.status != 200) {
                        scanResult.innerHTML = `<span style="color: red">phishing</span>`
                    }
                    return res.json();
                })
                .then(data => {
                    console.log(data)
                    createResult(data, scanResult)
                    // scanResult.innerText = JSON.stringify(data);
                })
                .catch(err => {
                    scanResult.innerHTML = `<span style="color: red">phishing</span>`
                    console.log(err)
                })
            console.warn(`Code scan error = ${error}`);
        }
        let html5QrcodeScanner = new Html5QrcodeScanner(
            "reader",
            { fps: 10, qrbox: { width: 250, height: 250 } },
  /* verbose= */ false);
        html5QrcodeScanner.render(onScanSuccess, onScanFailure);
    </script>
</body>

</html>